// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tkrzw_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBMServiceClient is the client API for DBMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBMServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Inspect(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetMulti(ctx context.Context, in *GetMultiRequest, opts ...grpc.CallOption) (*GetMultiResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	SetMulti(ctx context.Context, in *SetMultiRequest, opts ...grpc.CallOption) (*SetMultiResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	RemoveMulti(ctx context.Context, in *RemoveMultiRequest, opts ...grpc.CallOption) (*RemoveMultiResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	AppendMulti(ctx context.Context, in *AppendMultiRequest, opts ...grpc.CallOption) (*AppendMultiResponse, error)
	CompareExchange(ctx context.Context, in *CompareExchangeRequest, opts ...grpc.CallOption) (*CompareExchangeResponse, error)
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
	CompareExchangeMulti(ctx context.Context, in *CompareExchangeMultiRequest, opts ...grpc.CallOption) (*CompareExchangeMultiResponse, error)
	Rekey(ctx context.Context, in *RekeyRequest, opts ...grpc.CallOption) (*RekeyResponse, error)
	PopFirst(ctx context.Context, in *PopFirstRequest, opts ...grpc.CallOption) (*PopFirstResponse, error)
	PushLast(ctx context.Context, in *PushLastRequest, opts ...grpc.CallOption) (*PushLastResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	GetFileSize(ctx context.Context, in *GetFileSizeRequest, opts ...grpc.CallOption) (*GetFileSizeResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	Rebuild(ctx context.Context, in *RebuildRequest, opts ...grpc.CallOption) (*RebuildResponse, error)
	ShouldBeRebuilt(ctx context.Context, in *ShouldBeRebuiltRequest, opts ...grpc.CallOption) (*ShouldBeRebuiltResponse, error)
	Synchronize(ctx context.Context, in *SynchronizeRequest, opts ...grpc.CallOption) (*SynchronizeResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (DBMService_StreamClient, error)
	Iterate(ctx context.Context, opts ...grpc.CallOption) (DBMService_IterateClient, error)
	Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (DBMService_ReplicateClient, error)
	ChangeMaster(ctx context.Context, in *ChangeMasterRequest, opts ...grpc.CallOption) (*ChangeMasterResponse, error)
}

type dBMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBMServiceClient(cc grpc.ClientConnInterface) DBMServiceClient {
	return &dBMServiceClient{cc}
}

func (c *dBMServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Inspect(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectResponse, error) {
	out := new(InspectResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) GetMulti(ctx context.Context, in *GetMultiRequest, opts ...grpc.CallOption) (*GetMultiResponse, error) {
	out := new(GetMultiResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/GetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) SetMulti(ctx context.Context, in *SetMultiRequest, opts ...grpc.CallOption) (*SetMultiResponse, error) {
	out := new(SetMultiResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/SetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) RemoveMulti(ctx context.Context, in *RemoveMultiRequest, opts ...grpc.CallOption) (*RemoveMultiResponse, error) {
	out := new(RemoveMultiResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/RemoveMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) AppendMulti(ctx context.Context, in *AppendMultiRequest, opts ...grpc.CallOption) (*AppendMultiResponse, error) {
	out := new(AppendMultiResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/AppendMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) CompareExchange(ctx context.Context, in *CompareExchangeRequest, opts ...grpc.CallOption) (*CompareExchangeResponse, error) {
	out := new(CompareExchangeResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/CompareExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) CompareExchangeMulti(ctx context.Context, in *CompareExchangeMultiRequest, opts ...grpc.CallOption) (*CompareExchangeMultiResponse, error) {
	out := new(CompareExchangeMultiResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/CompareExchangeMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Rekey(ctx context.Context, in *RekeyRequest, opts ...grpc.CallOption) (*RekeyResponse, error) {
	out := new(RekeyResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Rekey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) PopFirst(ctx context.Context, in *PopFirstRequest, opts ...grpc.CallOption) (*PopFirstResponse, error) {
	out := new(PopFirstResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/PopFirst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) PushLast(ctx context.Context, in *PushLastRequest, opts ...grpc.CallOption) (*PushLastResponse, error) {
	out := new(PushLastResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/PushLast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) GetFileSize(ctx context.Context, in *GetFileSizeRequest, opts ...grpc.CallOption) (*GetFileSizeResponse, error) {
	out := new(GetFileSizeResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/GetFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Rebuild(ctx context.Context, in *RebuildRequest, opts ...grpc.CallOption) (*RebuildResponse, error) {
	out := new(RebuildResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Rebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) ShouldBeRebuilt(ctx context.Context, in *ShouldBeRebuiltRequest, opts ...grpc.CallOption) (*ShouldBeRebuiltResponse, error) {
	out := new(ShouldBeRebuiltResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/ShouldBeRebuilt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Synchronize(ctx context.Context, in *SynchronizeRequest, opts ...grpc.CallOption) (*SynchronizeResponse, error) {
	out := new(SynchronizeResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Synchronize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (DBMService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBMService_ServiceDesc.Streams[0], "/tkrzw_rpc.DBMService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBMServiceStreamClient{stream}
	return x, nil
}

type DBMService_StreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type dBMServiceStreamClient struct {
	grpc.ClientStream
}

func (x *dBMServiceStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBMServiceStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBMServiceClient) Iterate(ctx context.Context, opts ...grpc.CallOption) (DBMService_IterateClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBMService_ServiceDesc.Streams[1], "/tkrzw_rpc.DBMService/Iterate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBMServiceIterateClient{stream}
	return x, nil
}

type DBMService_IterateClient interface {
	Send(*IterateRequest) error
	Recv() (*IterateResponse, error)
	grpc.ClientStream
}

type dBMServiceIterateClient struct {
	grpc.ClientStream
}

func (x *dBMServiceIterateClient) Send(m *IterateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBMServiceIterateClient) Recv() (*IterateResponse, error) {
	m := new(IterateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBMServiceClient) Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (DBMService_ReplicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBMService_ServiceDesc.Streams[2], "/tkrzw_rpc.DBMService/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBMServiceReplicateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DBMService_ReplicateClient interface {
	Recv() (*ReplicateResponse, error)
	grpc.ClientStream
}

type dBMServiceReplicateClient struct {
	grpc.ClientStream
}

func (x *dBMServiceReplicateClient) Recv() (*ReplicateResponse, error) {
	m := new(ReplicateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBMServiceClient) ChangeMaster(ctx context.Context, in *ChangeMasterRequest, opts ...grpc.CallOption) (*ChangeMasterResponse, error) {
	out := new(ChangeMasterResponse)
	err := c.cc.Invoke(ctx, "/tkrzw_rpc.DBMService/ChangeMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBMServiceServer is the server API for DBMService service.
// All implementations must embed UnimplementedDBMServiceServer
// for forward compatibility
type DBMServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Inspect(context.Context, *InspectRequest) (*InspectResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetMulti(context.Context, *GetMultiRequest) (*GetMultiResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	SetMulti(context.Context, *SetMultiRequest) (*SetMultiResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	RemoveMulti(context.Context, *RemoveMultiRequest) (*RemoveMultiResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	AppendMulti(context.Context, *AppendMultiRequest) (*AppendMultiResponse, error)
	CompareExchange(context.Context, *CompareExchangeRequest) (*CompareExchangeResponse, error)
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
	CompareExchangeMulti(context.Context, *CompareExchangeMultiRequest) (*CompareExchangeMultiResponse, error)
	Rekey(context.Context, *RekeyRequest) (*RekeyResponse, error)
	PopFirst(context.Context, *PopFirstRequest) (*PopFirstResponse, error)
	PushLast(context.Context, *PushLastRequest) (*PushLastResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	GetFileSize(context.Context, *GetFileSizeRequest) (*GetFileSizeResponse, error)
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	Rebuild(context.Context, *RebuildRequest) (*RebuildResponse, error)
	ShouldBeRebuilt(context.Context, *ShouldBeRebuiltRequest) (*ShouldBeRebuiltResponse, error)
	Synchronize(context.Context, *SynchronizeRequest) (*SynchronizeResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Stream(DBMService_StreamServer) error
	Iterate(DBMService_IterateServer) error
	Replicate(*ReplicateRequest, DBMService_ReplicateServer) error
	ChangeMaster(context.Context, *ChangeMasterRequest) (*ChangeMasterResponse, error)
	mustEmbedUnimplementedDBMServiceServer()
}

// UnimplementedDBMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDBMServiceServer struct {
}

func (UnimplementedDBMServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedDBMServiceServer) Inspect(context.Context, *InspectRequest) (*InspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (UnimplementedDBMServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDBMServiceServer) GetMulti(context.Context, *GetMultiRequest) (*GetMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMulti not implemented")
}
func (UnimplementedDBMServiceServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDBMServiceServer) SetMulti(context.Context, *SetMultiRequest) (*SetMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMulti not implemented")
}
func (UnimplementedDBMServiceServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDBMServiceServer) RemoveMulti(context.Context, *RemoveMultiRequest) (*RemoveMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMulti not implemented")
}
func (UnimplementedDBMServiceServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedDBMServiceServer) AppendMulti(context.Context, *AppendMultiRequest) (*AppendMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMulti not implemented")
}
func (UnimplementedDBMServiceServer) CompareExchange(context.Context, *CompareExchangeRequest) (*CompareExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareExchange not implemented")
}
func (UnimplementedDBMServiceServer) Increment(context.Context, *IncrementRequest) (*IncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedDBMServiceServer) CompareExchangeMulti(context.Context, *CompareExchangeMultiRequest) (*CompareExchangeMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareExchangeMulti not implemented")
}
func (UnimplementedDBMServiceServer) Rekey(context.Context, *RekeyRequest) (*RekeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rekey not implemented")
}
func (UnimplementedDBMServiceServer) PopFirst(context.Context, *PopFirstRequest) (*PopFirstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopFirst not implemented")
}
func (UnimplementedDBMServiceServer) PushLast(context.Context, *PushLastRequest) (*PushLastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushLast not implemented")
}
func (UnimplementedDBMServiceServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedDBMServiceServer) GetFileSize(context.Context, *GetFileSizeRequest) (*GetFileSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSize not implemented")
}
func (UnimplementedDBMServiceServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedDBMServiceServer) Rebuild(context.Context, *RebuildRequest) (*RebuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebuild not implemented")
}
func (UnimplementedDBMServiceServer) ShouldBeRebuilt(context.Context, *ShouldBeRebuiltRequest) (*ShouldBeRebuiltResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldBeRebuilt not implemented")
}
func (UnimplementedDBMServiceServer) Synchronize(context.Context, *SynchronizeRequest) (*SynchronizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Synchronize not implemented")
}
func (UnimplementedDBMServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDBMServiceServer) Stream(DBMService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedDBMServiceServer) Iterate(DBMService_IterateServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterate not implemented")
}
func (UnimplementedDBMServiceServer) Replicate(*ReplicateRequest, DBMService_ReplicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedDBMServiceServer) ChangeMaster(context.Context, *ChangeMasterRequest) (*ChangeMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMaster not implemented")
}
func (UnimplementedDBMServiceServer) mustEmbedUnimplementedDBMServiceServer() {}

// UnsafeDBMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBMServiceServer will
// result in compilation errors.
type UnsafeDBMServiceServer interface {
	mustEmbedUnimplementedDBMServiceServer()
}

func RegisterDBMServiceServer(s grpc.ServiceRegistrar, srv DBMServiceServer) {
	s.RegisterService(&DBMService_ServiceDesc, srv)
}

func _DBMService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Inspect(ctx, req.(*InspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_GetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).GetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/GetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).GetMulti(ctx, req.(*GetMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_SetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).SetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/SetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).SetMulti(ctx, req.(*SetMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_RemoveMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).RemoveMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/RemoveMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).RemoveMulti(ctx, req.(*RemoveMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_AppendMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).AppendMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/AppendMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).AppendMulti(ctx, req.(*AppendMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_CompareExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).CompareExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/CompareExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).CompareExchange(ctx, req.(*CompareExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_CompareExchangeMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareExchangeMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).CompareExchangeMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/CompareExchangeMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).CompareExchangeMulti(ctx, req.(*CompareExchangeMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Rekey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RekeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Rekey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Rekey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Rekey(ctx, req.(*RekeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_PopFirst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopFirstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).PopFirst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/PopFirst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).PopFirst(ctx, req.(*PopFirstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_PushLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).PushLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/PushLast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).PushLast(ctx, req.(*PushLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_GetFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).GetFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/GetFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).GetFileSize(ctx, req.(*GetFileSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Rebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Rebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Rebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Rebuild(ctx, req.(*RebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_ShouldBeRebuilt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldBeRebuiltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).ShouldBeRebuilt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/ShouldBeRebuilt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).ShouldBeRebuilt(ctx, req.(*ShouldBeRebuiltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Synchronize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Synchronize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Synchronize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Synchronize(ctx, req.(*SynchronizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBMServiceServer).Stream(&dBMServiceStreamServer{stream})
}

type DBMService_StreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type dBMServiceStreamServer struct {
	grpc.ServerStream
}

func (x *dBMServiceStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBMServiceStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DBMService_Iterate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBMServiceServer).Iterate(&dBMServiceIterateServer{stream})
}

type DBMService_IterateServer interface {
	Send(*IterateResponse) error
	Recv() (*IterateRequest, error)
	grpc.ServerStream
}

type dBMServiceIterateServer struct {
	grpc.ServerStream
}

func (x *dBMServiceIterateServer) Send(m *IterateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBMServiceIterateServer) Recv() (*IterateRequest, error) {
	m := new(IterateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DBMService_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplicateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBMServiceServer).Replicate(m, &dBMServiceReplicateServer{stream})
}

type DBMService_ReplicateServer interface {
	Send(*ReplicateResponse) error
	grpc.ServerStream
}

type dBMServiceReplicateServer struct {
	grpc.ServerStream
}

func (x *dBMServiceReplicateServer) Send(m *ReplicateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DBMService_ChangeMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMServiceServer).ChangeMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tkrzw_rpc.DBMService/ChangeMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMServiceServer).ChangeMaster(ctx, req.(*ChangeMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBMService_ServiceDesc is the grpc.ServiceDesc for DBMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tkrzw_rpc.DBMService",
	HandlerType: (*DBMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _DBMService_Echo_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _DBMService_Inspect_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DBMService_Get_Handler,
		},
		{
			MethodName: "GetMulti",
			Handler:    _DBMService_GetMulti_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DBMService_Set_Handler,
		},
		{
			MethodName: "SetMulti",
			Handler:    _DBMService_SetMulti_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DBMService_Remove_Handler,
		},
		{
			MethodName: "RemoveMulti",
			Handler:    _DBMService_RemoveMulti_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _DBMService_Append_Handler,
		},
		{
			MethodName: "AppendMulti",
			Handler:    _DBMService_AppendMulti_Handler,
		},
		{
			MethodName: "CompareExchange",
			Handler:    _DBMService_CompareExchange_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _DBMService_Increment_Handler,
		},
		{
			MethodName: "CompareExchangeMulti",
			Handler:    _DBMService_CompareExchangeMulti_Handler,
		},
		{
			MethodName: "Rekey",
			Handler:    _DBMService_Rekey_Handler,
		},
		{
			MethodName: "PopFirst",
			Handler:    _DBMService_PopFirst_Handler,
		},
		{
			MethodName: "PushLast",
			Handler:    _DBMService_PushLast_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _DBMService_Count_Handler,
		},
		{
			MethodName: "GetFileSize",
			Handler:    _DBMService_GetFileSize_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _DBMService_Clear_Handler,
		},
		{
			MethodName: "Rebuild",
			Handler:    _DBMService_Rebuild_Handler,
		},
		{
			MethodName: "ShouldBeRebuilt",
			Handler:    _DBMService_ShouldBeRebuilt_Handler,
		},
		{
			MethodName: "Synchronize",
			Handler:    _DBMService_Synchronize_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _DBMService_Search_Handler,
		},
		{
			MethodName: "ChangeMaster",
			Handler:    _DBMService_ChangeMaster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _DBMService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Iterate",
			Handler:       _DBMService_Iterate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Replicate",
			Handler:       _DBMService_Replicate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tkrzw_rpc.proto",
}
